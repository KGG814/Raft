// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Raft.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

#define NONE 0
#define MAJ 3
#define NUM_SERVERS 5

class RaftHandler : virtual public RaftIf {
 public:

  // Raft server state

  // Persistent
  int currentTerm;
  int votedFor;
  std::vector<LogEntry> log;

  // Volatile
  int commitIndex;
  int lastIndex;

  // Leader only
  int nextIndex [5];
  int matchIndex [5];

  RaftHandler() {
    // State initialization
    currentTerm = 0;
    votedFor = NONE;
    commitIndex = 0;
    lastApplied = 0;
  }

  bool RequestVoteRPC(const RequestVote& vote) {
    // Your implementation goes here
    printf("RequestVoteRPC\n");
  }

  bool AppendEntriesRPC(const AppendEntries& append) {
    // Your implementation goes here
    printf("AppendEntriesRPC\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<RaftHandler> handler(new RaftHandler());
  shared_ptr<TProcessor> processor(new RaftProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

